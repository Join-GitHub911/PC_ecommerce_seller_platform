import { Repository } from "typeorm";
import { Order } from "./entities/order.entity";
import { OrderItem } from "./entities/order-item.entity";
import { OrderStatus } from "../../types/order.type";
import { OrderStateManager } from "../../services/OrderStateManager";
import { OrderAddress } from "./entities/order-address.entity";
import { Product } from "../product/entities/product.entity";
import { ProductSku } from "../product/entities/product-sku.entity";
import { CreateOrderDto } from "./dto/create-order.dto";
import { User } from "../user/entities/user.entity";
import { Queue } from "bull";
import { CouponService } from "../coupon/coupon.service";
import { NotificationService } from "../notification/notification.service";
import { OrderStatisticsService } from "../statistics/order-statistics.service";
export declare class OrderService {
    private readonly orderRepository;
    private readonly orderItemRepository;
    private readonly orderAddressRepository;
    private readonly productRepository;
    private readonly productSkuRepository;
    private readonly orderStateManager;
    private readonly couponService;
    private readonly notificationService;
    private readonly orderStatisticsService;
    private readonly orderQueue;
    private readonly logger;
    constructor(orderRepository: Repository<Order>, orderItemRepository: Repository<OrderItem>, orderAddressRepository: Repository<OrderAddress>, productRepository: Repository<Product>, productSkuRepository: Repository<ProductSku>, orderStateManager: OrderStateManager, couponService: CouponService, notificationService: NotificationService, orderStatisticsService: OrderStatisticsService, orderQueue: Queue);
    create(user: User, createOrderDto: CreateOrderDto): Promise<Order>;
    findAll(user: User): Promise<Order[]>;
    findOne(id: number): Promise<Order>;
    cancel(id: number, user: User, reason: string): Promise<Order>;
    private generateOrderNo;
    private validateProductInventory;
    private calculateOrderAmount;
    private createOrderItems;
    private decreaseProductInventory;
    private restoreInventory;
    private setOrderExpiration;
    handlePaymentSuccess(orderId: number, paymentId: number, amount: number): Promise<Order>;
    countByStatus(userId: number, status: OrderStatus): Promise<number>;
    getOrderStatistics(userId: number): Promise<any>;
}
